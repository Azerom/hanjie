
enum TailleResultats
{
	5x3,
	7x4,
	9x5,
	11x6
};

enum Difficulte
{
	FACILE,
	NORMAL,
	DIFFICILE
};

struct Cases
{
	int [][] grille;
	int hauteur;
	int largeur;
};


struct Partie
{
	Cases pattern; //Solution du niveau
	Cases actuel; //Tableau remplis par l'utilisateur
	char [50] pseudo;
	TailleResultats tailleResultats;
	Niveau niveau;
	long temp;
	long date;
	enum TypeNiveau type;
	enum Difficulte difficulte;
};

struct ElementHistorique
{
	long date;	
	char [50] pseudo;
	TypeNiveau type;
	Difficulte difficulte;
	long temp;
	Element *suivant;
}
<>-------<Fichier structures.c>-------------------------<>
int** initialisationCases(int x, int y=); //Permet d'initaliser une strcture Cases, renvoie le tableau a deux 							dimensions a integrer dans la structure.
<>------------------------------------------------------<>


<>-------<Fichier affichage.c>--------------------------<>
void affichage (*Cases grille);
void score (TailleResultats tailleResultats, long temp);
<>------------------------------------------------------<>

<>--------<Fichier jeu.c>----------------<>
long hanjie (Partie *partie); // Renvoie le score ou -1 si on doit enregister, -2 si on quitte le jeu.
int verificationPartie (Partie *partie); //Renvoie 0 si pattern == actuel, sinon 1
<>---------------------------------------<>

<>----------<Fichier fichiers.c>-----------------------------------------<>
void lecture_db (Niveau [] listeNiveaux, char [3][50] addressesSauvegardes ); // charge la base de niveaux
Cases lectureNiveau (Niveau niveau); //Charge le niveau
void sauvegarde (Partie *partie);
void chargement (Partie *partie);
void enregistrerHistorique (Partie *partie);
void lireHistorique (ElementHistorique actuel);
<>-----------------------------------------------------------------------<>
